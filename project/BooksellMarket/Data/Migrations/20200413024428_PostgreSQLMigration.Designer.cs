// <auto-generated />
using System;
using Data.Context;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

namespace Data.Migrations
{
    [DbContext(typeof(DatabaseContext))]
    [Migration("20200413024428_PostgreSQLMigration")]
    partial class PostgreSQLMigration
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn)
                .HasAnnotation("ProductVersion", "5.0.0-preview.2.20159.4")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            modelBuilder.Entity("Data.DataSources.ActiveOrderDataSource", b =>
                {
                    b.Property<int>("OrderId")
                        .HasColumnType("integer");

                    b.Property<int>("IceCreamId")
                        .HasColumnType("integer");

                    b.Property<DateTime>("OrderTime")
                        .HasColumnType("timestamp without time zone");

                    b.HasKey("OrderId", "IceCreamId");

                    b.HasIndex("IceCreamId");

                    b.ToTable("ActiveOrders");
                });

            modelBuilder.Entity("Data.DataSources.ClientDataSource", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Clients");
                });

            modelBuilder.Entity("Data.DataSources.CompositionDataSource", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Compositions");
                });

            modelBuilder.Entity("Data.DataSources.IceCreamDataSource", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<double>("Price")
                        .HasColumnType("double precision");

                    b.HasKey("Id");

                    b.ToTable("IceCreams");
                });

            modelBuilder.Entity("Data.DataSources.OrderDataSource", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<int?>("ClientDataSourceId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("ClientDataSourceId");

                    b.ToTable("Orders");
                });

            modelBuilder.Entity("Data.DataSources.SelectedCompositionDataSource", b =>
                {
                    b.Property<int>("IceCreamId")
                        .HasColumnType("integer");

                    b.Property<int>("CompositionId")
                        .HasColumnType("integer");

                    b.HasKey("IceCreamId", "CompositionId");

                    b.HasIndex("CompositionId");

                    b.ToTable("SelectedComposition");
                });

            modelBuilder.Entity("Data.DataSources.ActiveOrderDataSource", b =>
                {
                    b.HasOne("Data.DataSources.IceCreamDataSource", "IceCream")
                        .WithMany("Orders")
                        .HasForeignKey("IceCreamId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Data.DataSources.OrderDataSource", "Order")
                        .WithMany("Orders")
                        .HasForeignKey("OrderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Data.DataSources.OrderDataSource", b =>
                {
                    b.HasOne("Data.DataSources.ClientDataSource", null)
                        .WithMany("Orders")
                        .HasForeignKey("ClientDataSourceId");
                });

            modelBuilder.Entity("Data.DataSources.SelectedCompositionDataSource", b =>
                {
                    b.HasOne("Data.DataSources.CompositionDataSource", "Composition")
                        .WithMany("Compositions")
                        .HasForeignKey("CompositionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Data.DataSources.IceCreamDataSource", "IceCream")
                        .WithMany("Compositions")
                        .HasForeignKey("IceCreamId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
